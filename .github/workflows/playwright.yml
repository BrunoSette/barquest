name: Playwright Tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: production

    env:
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
      POSTGRES_USER: ${{ secrets.DB_USER }}
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.DB_HOST }}
      POSTGRES_PORT: 6543
      POSTGRES_NAME: "postgres"
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

      # SENTRY_ORG: "omnireno-inc"
      # SENTRY_PROJECT: "barquest"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: Install dependencies
        run: yarn install

      - name: Build the application
        run: yarn build

      - name: Start the application
        run: yarn start &
        env:
          PORT: 3000

      - name: Wait for the app to start
        run: npx wait-on http://localhost:3000

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Print environment variables
        run: printenv

      - name: Run Playwright tests with tracing
        run: |
          mkdir -p test-results
          npx playwright test --trace on --output=test-results

      - name: Upload Playwright report and trace
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
          retention-days: 7

      # Sentry integration: create a release and deploy
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          # SENTRY_ORG: "omnireno-inc"
          # SENTRY_PROJECT: "barquest"
        with:
          environment: production

      - name: Finalize and notify Sentry of deployment
        run: |
          sentry-cli releases finalize $GITHUB_SHA
          sentry-cli releases deploys $GITHUB_SHA new -e production
